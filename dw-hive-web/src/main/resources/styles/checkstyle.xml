<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
    <module name="FileTabCharacter">
        <!-- Checks that there are no tab characters in the file. -->
    </module>

    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">

        <!-- IMPORT CHECKS -->

        <module name="RedundantImport">
            <!-- Checks for redundant import statements. -->
            <property name="severity" value="error" />
        </module>

        <module name="UnusedImports">
            <property name="severity" value="warning" />
        </module>

        <module name="AvoidStarImport">
            <property name="severity" value="error" />
        </module>

        <!-- NAMING CHECKS -->

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$" />
            <property name="severity" value="error" />
        </module>

        <module name="TypeNameCheck">
            <metadata name="altname" value="TypeName" />
            <property name="severity" value="warning" />
        </module>

        <module name="ConstantNameCheck">
            <metadata name="altname" value="ConstantName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="false" />
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$" />
            <message key="name.invalidPattern"
                value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)." />
            <property name="severity" value="warning" />
        </module>

        <module name="StaticVariableNameCheck">
            <metadata name="altname" value="StaticVariableName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$" />
            <property name="severity" value="warning" />
        </module>

        <module name="MemberNameCheck">
            <metadata name="altname" value="MemberName" />
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="true" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*$" />
            <property name="severity" value="warning" />
        </module>

        <module name="MethodNameCheck">
            <metadata name="altname" value="MethodName" />
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$" />
            <property name="severity" value="warning" />
        </module>

        <module name="ParameterName">
            <property name="severity" value="warning" />
        </module>

        <module name="LocalFinalVariableName">
            <property name="severity" value="warning" />
        </module>

        <module name="LocalVariableName">
            <property name="severity" value="warning" />
        </module>


        <!-- LENGTH and CODING CHECKS -->

        <module name="LineLength">
            <property name="max" value="100" />
            <property name="severity" value="error" />

            <!-- The default ignore pattern exempts the following elements: - import 
                statements - long URLs inside comments -->

            <property name="ignorePattern"
                value="${com.puppycrawl.tools.checkstyle.checks.sizes.LineLength.ignorePattern}"
                default="^(package .*;\s*)|(import .*;\s*)|( *\* *https?://.*)$" />
        </module>

        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="severity" value="warning" />
            <property name="tokens"
                value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO" />
        </module>

        <module name="UpperEll">
            <!-- Checks that long constants are defined with an upper ell. -->
            <property name="severity" value="error" />
        </module>

        <module name="FallThrough">
            <!-- Warn about falling through to the next case statement. Similar to 
                javac -Xlint:fallthrough, but the check is suppressed if a single-line comment on 
                the last non-blank line preceding the fallen-into case contains 'fall through' (or 
                some other variants which we don't publicized to promote consistency). -->
            <property name="reliefPattern"
                value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on" />
            <property name="severity" value="error" />
        </module>

        <!-- WHITESPACE CHECKS -->

        <module name="WhitespaceAround">
            <!-- Checks that various tokens are surrounded by whitespace. This includes 
                most binary operators and keywords followed by regular or curly braces. -->
            <property name="tokens"
                value="ASSIGN, BAND, BAND_ASSIGN, BOR,
                    BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
                    EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
                    LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
                    LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
                    MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
                    SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN" />
            <property name="severity" value="error" />
        </module>

        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by whitespace. -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
        </module>

        <module name="NoWhitespaceAfter">
            <!-- Checks that there is no whitespace after various unary operators. 
                Linebreaks are allowed. -->
            <property name="tokens"
                value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="NoWhitespaceBefore">
            <!-- Checks that there is no whitespace before various unary operators. 
                Linebreaks are allowed. -->
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="ParenPad">
            <!-- Checks that there is no whitespace before close parens or after 
                open parens. -->
            <property name="severity" value="warning" />
        </module>
    </module>
</module>